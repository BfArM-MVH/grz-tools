name: Build and Publish to PyPI

on:
  workflow_dispatch:
  push:
    tags:
      - '*-v[0-9]+.[0-9]+.[0-9]+*'

jobs:
  build-and-publish-package:
    name: Build & Publish Package from tag
    runs-on: ubuntu-latest
    if: "!startsWith(github.ref_name, 'grz-check-provider')"  # grz-check-provider is handled explicitly in build-binary-wheels.yml
    environment:
      name: pypi
      url: ${{ steps.update_env_url.outputs.PYPI_PACKAGE_URL }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          lfs: true
          ref: ${{ github.ref }} # Checkout the specific tag

      - name: Extract package name from tag
        id: extract_package_info
        run: |
          TAG_NAME="${{ github.ref_name }}" # e.g., grz-cli-v1.2.3
          PKG_NAME=$(echo "$TAG_NAME" | sed -E 's/-v[0-9]+\.[0-9]+\.[0-9]+.*//')
          echo "name=$PKG_NAME" >> $GITHUB_OUTPUT
          echo "artifact_name=${PKG_NAME}-build-${{ github.run_id }}" >> $GITHUB_OUTPUT
          echo "Extracted package name: $PKG_NAME from tag $TAG_NAME"

      - name: Update Environment URL
        id: update_env_url
        # Only run if PKG_NAME was successfully extracted
        if: steps.extract_package_info.outputs.name != ''
        run: |
          echo "PYPI_PACKAGE_URL=https://pypi.org/p/${{ steps.extract_package_info.outputs.name }}" >> $GITHUB_OUTPUT
          echo "PyPI Environment URL will be set to: https://pypi.org/p/${{ steps.extract_package_info.outputs.name }}"

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: '0.7.9'
          enable-cache: true

      - name: Set up Python
        run: uv python install 3.12

      - name: Build package ${{ steps.extract_package_info.outputs.name }}
        id: build_step
        if: steps.extract_package_info.outputs.name != '' # Ensure PKG_NAME is not empty
        run: |
          echo "Building package: ${{ steps.extract_package_info.outputs.name }}"
          OUTPUT_DIR="dist_for_upload"
          mkdir -p $OUTPUT_DIR
          uv build --sdist --wheel --project "packages/${{ steps.extract_package_info.outputs.name }}" --out-dir $OUTPUT_DIR

          echo "Contents of $OUTPUT_DIR:"
          ls -l $OUTPUT_DIR
          echo "dist_path=$OUTPUT_DIR" >> $GITHUB_OUTPUT

      - name: Publish ${{ steps.extract_package_info.outputs.name }} to PyPI
        if: steps.build_step.outputs.dist_path != '' && steps.extract_package_info.outputs.name != ''
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages_dir: ${{ steps.build_step.outputs.dist_path }}
